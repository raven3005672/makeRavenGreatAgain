// JS内存空间
// 分为栈stack、堆heap、池【一般也会归类到栈中】。其中栈存放变量，堆存放复杂对象，池存放常量，所以页脚常量池。

// 基本类型 -> 栈内存（不包含闭包中的变量）
// 引用类型 -> 堆内存
// 闭包中的变量并不保存在栈内存中，而是保存在堆内存中，这就解释了函数之后为什么闭包还能引用到函数内的变量。
function A() {
    let a = 1;
    function B() {
        console.log(B);
    }
    return B;
}
// 闭包的简单定义是：函数A返回了一个函数B，并且函数B中使用了函数A的变量，函数B就被称为闭包。

// 函数A弹出调用栈后，函数A中的变量这时候是存储在堆上的，所以函数B依旧能引用到函数A中的变量。
// 关于闭包的详细介绍见第二期


// 内存回收和内存泄漏
// 内存回收
// javascript有自动垃圾回收机制，垃圾收集器会每隔一段时间就执行一次释放操作，找出那些不再继续使用的值，然后释放其占用的内存。
// 局部变量和全局变量的销毁
// 局部变量：局部作用域中，当函数执行完毕，局部变量也就没有存在的必要了，因此垃圾收集器很容易做出判断并回收。
// 全局变量：全局变量什么时候需要自动释放内存空间则很难判断，所以在开发中尽量避免使用全局变量。

// Google的V8引擎为例，V8引擎中所有的JS对象都是通过堆来进行内存分配的。
// 初始分配：当声明变量并赋值时，V8引擎就会在堆内存中分配给这个变量。
// 继续申请：当已申请的内存不足以存储这个变量时，V8引擎就会继续申请内存，直到堆的大小达到了V8引擎的内存上限为止。
// V8引擎对堆内存中的JS对象进行分代管理
// 新生代：存货周期较短的JS对象，如临时变量、字符串等。
// 老生带：经过多次垃圾回收仍然存活，存活周期较长的对象，如主控制器、服务器对象等。


// 垃圾回收算法
// 对垃圾回收算法来说，核心思想就是如何判断内存已经不再使用，常用垃圾回收算法有下面两种。
// 引用计数（现代浏览器不再使用）
// 标记清除（常用）


// 引用计数
// 引用计数算法定义“内存不再使用”的标准很简单，就是看一个对象是否有指向它的引用。如果没有其他对象指向它了，说明该对象已经不再需要了。

// 创建一个对象person，他有两个指向属性age和name的引用
var person = {
    age: 12,
    name: 'aaaa'
};
person.name = null; // 虽然name设置为null, 但因为person对象还有指向name的引用，因此name不会回收
var p = person;
person = 1;         // 原来的person对象被赋值为1，但因为有新引用p指向原person对象，因此它不会被回收
p = null;           // 原person对象已经没有引用，很快会被回收

// 引用计数有一个致命的问题，那就是循环引用
// 如果两个对象相互引用，尽管他们已不再使用，但是垃圾回收器不会进行回收，最终可能会导致内存泄漏。
function cycle() {
    var o1 = {};
    var o2 = {};
    o1.a = o2;
    o2.a = o1;
    return "cycle reference!"
}
cycle();
// cycle函数执行完成之后，对象o1和o2实际上已经不再需要了，但根据引用计数的原则，他们之间的相互引用依然存在，因此这部分内存不会被回收。


// 标记清除（常用）
// 标记清除算法将“不再使用的对象”定义为“无法到达的对象”。即从根部（在JS中间就是全局对象）出发定时扫描内存中的对象，凡是能从根部到达的对象，保留。那些从根部触发无法触及到的对象被标记为不再使用，稍后进行回收。






