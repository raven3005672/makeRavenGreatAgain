// 解析赋值、浅拷贝、深拷贝
// 赋值（Copy）
// 赋值是将某一数值或对象赋给某个变量的过程，分为下面两部分
// 基本数据类型：赋值，复制之后两个变量互不影响。
// 引用数据类型：赋址，两个变量具有相同的引用，指向同一个地址，相互之间有影响。
// 通常在开发中并不希望改变变量a之后会影响到变量b，这时就需要用到浅拷贝和深拷贝。

// 浅拷贝（Shallow Copy）
// 什么是浅拷贝
// 创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。
// 浅拷贝只解决了第一层的问题，拷贝第一层的基本类型值，以及第一层的引用类型地址。

// 浅拷贝使用场景
// 1.Object.assign()
// 用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。
// 2.展开语法Spread
let a = {
    // ...
};
let b  = {...a};
// 3.Array.prototype.slice()
// slice方法返回一个新的数组对象，这一对象是一个由begin和end(不包括end)决定的原数组的浅拷贝。原始数组不会被改变。


// 深拷贝（Deep Copy）
// 什么是深拷贝
// 深拷贝会拷贝所有的属性，并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。深拷贝相比于浅拷贝速度较慢并且花销较大。拷贝前后两个对象互不影响。
// 深拷贝使用场景
// 1.JSON.parse(JSON.stringify(object))
// 存在问题：会忽略undefined；会忽略symbol；不能序列化函数；不能解决循环引用的对象；不能正确处理new Date()；不能处理正则











